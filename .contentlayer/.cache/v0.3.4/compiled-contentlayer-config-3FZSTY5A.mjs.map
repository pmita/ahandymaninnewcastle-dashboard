{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// PACKAGES\nimport { defineDocumentType, defineNestedType, makeSource } from \"contentlayer/source-files\"\nimport rehypeSlug from \"rehype-slug\"\n\n// Define project category markdown structure with types\nexport const Category = defineNestedType(() => ({\n  name: \"Category\",\n  fields: {\n    variant: {\n      type: \"enum\",\n      options: [\"painting\", \"tilling\", \"miscellaneous\"],\n      default: \"miscellaneous\"\n    }\n  },\n}))\n\n// Define project markdown structure with types\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: \"projects/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the project\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the project\",\n    },\n    date: {\n      type: \"date\",\n      description: \"The date the project was published\",\n      required: true,\n    },\n    categories: {\n      type: \"list\",\n      of: Category,\n      description: \"The categories of the project\",\n    },\n    thumbnailImg: {\n      type: \"string\",\n      description: \"Project thumbnail image\",\n    },\n    thumbnailImgAlt: {\n      type: \"string\",\n      description: \"Alt text for the project thumbnail image\",\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    }, \n    slugAsParams: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    }\n  },\n}))\n\n// Define privacy policy markdown structure with types\nexport const PrivacyPolicy = defineDocumentType(() => ({\n  name: \"PrivacyPolicy\",\n  filePathPattern: \"privacy-policy/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the privacy policy\",\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    }, \n    slugAsParams: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    }\n  },\n}))\n\n// Build and export content in /content folder\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Project, PrivacyPolicy],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n    ]\n  }\n})"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB,kBAAkB;AACjE,OAAO,gBAAgB;AAGhB,IAAM,WAAW,iBAAiB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,WAAW,eAAe;AAAA,MAChD,SAAS;AAAA,IACX;AAAA,EACF;AACF,EAAE;AAGK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,aAAa;AAAA,IACf;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,IAC9C;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IACvE;AAAA,EACF;AACF,EAAE;AAGK,IAAM,gBAAgB,mBAAmB,OAAO;AAAA,EACrD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,IAC9C;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,IACvE;AAAA,EACF;AACF,EAAE;AAGF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,aAAa;AAAA,EACtC,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
